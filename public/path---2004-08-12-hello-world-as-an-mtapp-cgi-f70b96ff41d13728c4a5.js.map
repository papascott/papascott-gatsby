{"version":3,"sources":["webpack:///path---2004-08-12-hello-world-as-an-mtapp-cgi-f70b96ff41d13728c4a5.js","webpack:///./.cache/json/2004-08-12-hello-world-as-an-mtapp-cgi.json"],"names":["webpackJsonp","6962","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","next"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,qzLAAyqLC,QAA2KC,MAAA,gCAAAC,KAAA,cAAAC,IAAA,kEAAoIC,aAAgBC,KAAA,2CAAAC,MAA0DN,QAAUC,MAAA,kDAAAC,KAAA,cAAAG,KAAA,iEAAsJE,MAASP,QAAUC,MAAA,0CAAAC,KAAA,cAAAG,KAAA","file":"path---2004-08-12-hello-world-as-an-mtapp-cgi-f70b96ff41d13728c4a5.js","sourcesContent":["webpackJsonp([73624948367820],{\n\n/***/ 6962:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>I've been waiting for a consumer version of Movable Type 3 before taking a look at it, having been bitten by a couple of bugs in the developer version and the lack of (the <a href=\\\"http://www.sixapart.com/log/2004/07/plug_in_to_mova.shtml\\\">now award-winning</a>) <a href=\\\"http://www.jayallen.org/comment_spam/\\\">MT-Blacklist</a>. Both will soon be alleviated in the upcoming <a href=\\\"http://www.movabletype.org/news/2004/07/movable_type_31_whats_new.shtml\\\" title=\\\"Movable Type Publishing Platform: Movable Type 3.1: What's New\\\">Movable Type 3.1</a>, scheduled for August 31, which means it may or may not be already in beta.</p>\\n<p>Reason enough to look again at MT3 and the plugin architecture. I had an idea for a plugin, and it took all of one hour to write up. (More on that later.) But then I wanted to be able to use a CGI to set a couple of configuration variables. And there I got stuck.<br />\\n<!--more--><br />\\nThe <a href=\\\"http://www.movabletype.org/docs/plugin-tut.html#interface%20guidelines\\\" title=\\\"Writing a plugin\\\">plugin tutorial</a> says that \\\"The best way to (build a human interface for your plugin) is to write a subclass of MT::App\\\" without really explaining how to do that. The <a href=\\\"http://www.movabletype.org/docs/mtapi_mt_app.html\\\" title=\\\"MT::App\\\">docs for MT::App</a> are a bit sparse on the subject as well. There are a number of mature plugins that build interfaces in this way, but looking at them, I felt like I was looking at the blueprints of the Empire State Building, when at first all I want to build is a hut on the beach.</p>\\n<p>Finally when I was looking at Chad Everett's <a href=\\\"http://jayseae.cxliv.org/movable_type/notifier/\\\" title=\\\"MT-Notifier\\\" plugin for movable type>MT-Notifier</a> (<a href=\\\"http://www.sixapart.com/log/2004/07/plug_in_to_mova.shtml\\\">also award-winning</a>) did the light bulb turn on inside my head and I saw the light. It took me 4 files, each in a different directory, but I was able to write a Hello World CGI plugin for Movable Type 3.</p>\\n<p>First we need a <code>MT_DIR/plugins/hello.pl</code>. It doesn't do anything except register the plugin so I get a nice link to my CGI on the MT main page.</p>\\n<pre>package MT::Plugin::Hello;\\nuse strict;\\nuse MT;\\nuse MT::Plugin;\\nuse vars qw($VERSION);\\n$VERSION = '0.1';\\nmy $about = {\\n  name => 'MT-Hello',\\n  config_link => '../mt-hello.cgi',\\n  description => 'Say hello to the world in a unique way.',\\n  doc_link => 'http://www.papascott.de/archives/2004/08/12/hello-world-as-an-mtapp-cgi/'\\n}; \\nMT->add_plugin(new MT::Plugin($about));</pre>\\n<p>Next comes the CGI itself in <code>MT_DIR/mt-hello.cgi</code>, which does nothing but call my subclass of MT::App. Most plugin CGIs look exactly like this.</p>\\n<pre>#!/usr/bin/perl -w\\nuse strict;\\nmy($MT_DIR);\\nBEGIN {\\n  if ($0 =~ m!(.*[/])!) {\\n    $MT_DIR = $1;\\n  } else {\\n    $MT_DIR = './';\\n  }\\n  unshift @INC, $MT_DIR . 'lib';\\n  unshift @INC, $MT_DIR . 'extlib';\\n}\\neval {\\n  require shanson::hello;\\n  my $app = shanson::hello->new (\\n    Config => $MT_DIR . 'mt.cfg',\\n    Directory => $MT_DIR\\n  ) or die shanson::hello->errstr;\\n  local $SIG{__WARN__} = sub { $app->trace ($_[0]) };\\n  $app->run;\\n};\\nif ($@) {\\n  print \\\"Content-Type: text/htmlnn\\\";\\n  print \\\"An error occurred: $@\\\";\\n}</pre>\\n<p>Now we get to the meat and potatoes in <code>MT_DIR/extlib/shanson/hello.pm</code>, where I say that all I really want my <code>$app</code> to do is print some text. I require a login only so I get a pretty header on the page. <strong>Update:</strong> I've incorporated <a href=\\\"http://www.papascott.de/archives/2004/08/12/hello-world-as-an-mtapp-cgi/#comment-1501\\\">Phil Ringalda's suggestions</a>. The sub uri is so the pretty header links back to the proper mt.cgi instead of mt-hello.</p>\\n<pre>package shanson::hello;\\nuse strict;\\nuse MT::App::CMS;\\nuse vars qw(@ISA $VERSION);\\n@ISA = qw(MT::App::CMS);\\n$VERSION = '0.1';\\nsub uri {\\n  $_[0]->path . MT::ConfigMgr->instance->AdminScript;\\n}\\nsub init {\\n  my $app = shift;\\n  $app->SUPER::init (@_) or return;\\n  $app->add_methods (hello => &hello);\\n  $app->{default_mode} = 'hello';\\n  $app->{requires_login} = 1 ;\\n  $app->{user_class} = 'MT::Author';\\n  $app->{is_admin} = 1;\\n  $app;\\n}\\nsub hello {\\n  my $app = shift;\\n  my %param = (no_breadcrumbs => 1);\\n  $app->build_page('hello.tmpl', %param);\\n}</pre>\\n<p>Finally, I put a template file in <code>MT_DIR/tmpl/cms/hello.tmpl</code>, so my class knows what it is supposed to print.</p>\\n<pre>&lt;tmpl_include NAME=\\\"header.tmpl\\\"&gt;\\nHello, world!\\n&lt;tmpl_include NAME=\\\"footer.tmpl\\\"&gt;</pre>\\n<p>And no description of a web application is complete without a couple of screenshots:</p>\\n<p>Main screen:<a href=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_main.gif\\\"><img src=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_mainthumb.gif\\\" alt=\\\"Main screen\\\" border=\\\"0\\\" /></a></p>\\n<p>CGI screen:<a href=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_cgi.gif\\\"><img src=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_cgithumb.gif\\\" alt=\\\"CGI screen\\\" border=\\\"0\\\" /></a></p>\\n<p>Now I just have to write a CGI that actually does something, like, ummm, what did I want to do again? Oh yes, set a couple of configuration variables for my plugin.</p>\\n<p><strong>Update 28 Oct 2004:</strong> David Jacobs noticed some missing backslashes, which I'm guessing went missing when I reimported all my blog entries into Movable Type. Sorry about that!</p>\\n<p><strong>18 Mar 2005</strong> MySQL ate my blackslashes again! Crucial backslashes were missing in <code>$app-&gt;add_methods (hello =&gt; &hello);</code> and <code>$app-&gt;build_page('hello.tmpl', %param);</code>. Thanks to the ProNet mailing list for pointing this out in February and to Nathanial Irons for reminding me that I hadn't yet corrected this page.</p>\",\"fields\":{\"title\":\"Hello World as an MT::App CGI\",\"date\":\"12 Aug 2004\",\"url\":\"https://papascott.de/2004-08-12-hello-world-as-an-mtapp-cgi/\"}}},\"pathContext\":{\"slug\":\"/2004-08-12-hello-world-as-an-mtapp-cgi/\",\"prev\":{\"fields\":{\"title\":\"German spelling reform and linguistic ignorance\",\"date\":\"12 Aug 2004\",\"slug\":\"/2004-08-12-german-spelling-reform-and-linguistic-ignorance/\"}},\"next\":{\"fields\":{\"title\":\"Indiana Jones and the Workplace of Doom\",\"date\":\"13 Aug 2004\",\"slug\":\"/2004-08-13-indiana-jones-and-the-workplace-of-doom/\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2004-08-12-hello-world-as-an-mtapp-cgi-f70b96ff41d13728c4a5.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>I've been waiting for a consumer version of Movable Type 3 before taking a look at it, having been bitten by a couple of bugs in the developer version and the lack of (the <a href=\\\"http://www.sixapart.com/log/2004/07/plug_in_to_mova.shtml\\\">now award-winning</a>) <a href=\\\"http://www.jayallen.org/comment_spam/\\\">MT-Blacklist</a>. Both will soon be alleviated in the upcoming <a href=\\\"http://www.movabletype.org/news/2004/07/movable_type_31_whats_new.shtml\\\" title=\\\"Movable Type Publishing Platform: Movable Type 3.1: What's New\\\">Movable Type 3.1</a>, scheduled for August 31, which means it may or may not be already in beta.</p>\\n<p>Reason enough to look again at MT3 and the plugin architecture. I had an idea for a plugin, and it took all of one hour to write up. (More on that later.) But then I wanted to be able to use a CGI to set a couple of configuration variables. And there I got stuck.<br />\\n<!--more--><br />\\nThe <a href=\\\"http://www.movabletype.org/docs/plugin-tut.html#interface%20guidelines\\\" title=\\\"Writing a plugin\\\">plugin tutorial</a> says that \\\"The best way to (build a human interface for your plugin) is to write a subclass of MT::App\\\" without really explaining how to do that. The <a href=\\\"http://www.movabletype.org/docs/mtapi_mt_app.html\\\" title=\\\"MT::App\\\">docs for MT::App</a> are a bit sparse on the subject as well. There are a number of mature plugins that build interfaces in this way, but looking at them, I felt like I was looking at the blueprints of the Empire State Building, when at first all I want to build is a hut on the beach.</p>\\n<p>Finally when I was looking at Chad Everett's <a href=\\\"http://jayseae.cxliv.org/movable_type/notifier/\\\" title=\\\"MT-Notifier\\\" plugin for movable type>MT-Notifier</a> (<a href=\\\"http://www.sixapart.com/log/2004/07/plug_in_to_mova.shtml\\\">also award-winning</a>) did the light bulb turn on inside my head and I saw the light. It took me 4 files, each in a different directory, but I was able to write a Hello World CGI plugin for Movable Type 3.</p>\\n<p>First we need a <code>MT_DIR/plugins/hello.pl</code>. It doesn't do anything except register the plugin so I get a nice link to my CGI on the MT main page.</p>\\n<pre>package MT::Plugin::Hello;\\nuse strict;\\nuse MT;\\nuse MT::Plugin;\\nuse vars qw($VERSION);\\n$VERSION = '0.1';\\nmy $about = {\\n  name => 'MT-Hello',\\n  config_link => '../mt-hello.cgi',\\n  description => 'Say hello to the world in a unique way.',\\n  doc_link => 'http://www.papascott.de/archives/2004/08/12/hello-world-as-an-mtapp-cgi/'\\n}; \\nMT->add_plugin(new MT::Plugin($about));</pre>\\n<p>Next comes the CGI itself in <code>MT_DIR/mt-hello.cgi</code>, which does nothing but call my subclass of MT::App. Most plugin CGIs look exactly like this.</p>\\n<pre>#!/usr/bin/perl -w\\nuse strict;\\nmy($MT_DIR);\\nBEGIN {\\n  if ($0 =~ m!(.*[/])!) {\\n    $MT_DIR = $1;\\n  } else {\\n    $MT_DIR = './';\\n  }\\n  unshift @INC, $MT_DIR . 'lib';\\n  unshift @INC, $MT_DIR . 'extlib';\\n}\\neval {\\n  require shanson::hello;\\n  my $app = shanson::hello->new (\\n    Config => $MT_DIR . 'mt.cfg',\\n    Directory => $MT_DIR\\n  ) or die shanson::hello->errstr;\\n  local $SIG{__WARN__} = sub { $app->trace ($_[0]) };\\n  $app->run;\\n};\\nif ($@) {\\n  print \\\"Content-Type: text/htmlnn\\\";\\n  print \\\"An error occurred: $@\\\";\\n}</pre>\\n<p>Now we get to the meat and potatoes in <code>MT_DIR/extlib/shanson/hello.pm</code>, where I say that all I really want my <code>$app</code> to do is print some text. I require a login only so I get a pretty header on the page. <strong>Update:</strong> I've incorporated <a href=\\\"http://www.papascott.de/archives/2004/08/12/hello-world-as-an-mtapp-cgi/#comment-1501\\\">Phil Ringalda's suggestions</a>. The sub uri is so the pretty header links back to the proper mt.cgi instead of mt-hello.</p>\\n<pre>package shanson::hello;\\nuse strict;\\nuse MT::App::CMS;\\nuse vars qw(@ISA $VERSION);\\n@ISA = qw(MT::App::CMS);\\n$VERSION = '0.1';\\nsub uri {\\n  $_[0]->path . MT::ConfigMgr->instance->AdminScript;\\n}\\nsub init {\\n  my $app = shift;\\n  $app->SUPER::init (@_) or return;\\n  $app->add_methods (hello => &hello);\\n  $app->{default_mode} = 'hello';\\n  $app->{requires_login} = 1 ;\\n  $app->{user_class} = 'MT::Author';\\n  $app->{is_admin} = 1;\\n  $app;\\n}\\nsub hello {\\n  my $app = shift;\\n  my %param = (no_breadcrumbs => 1);\\n  $app->build_page('hello.tmpl', %param);\\n}</pre>\\n<p>Finally, I put a template file in <code>MT_DIR/tmpl/cms/hello.tmpl</code>, so my class knows what it is supposed to print.</p>\\n<pre>&lt;tmpl_include NAME=\\\"header.tmpl\\\"&gt;\\nHello, world!\\n&lt;tmpl_include NAME=\\\"footer.tmpl\\\"&gt;</pre>\\n<p>And no description of a web application is complete without a couple of screenshots:</p>\\n<p>Main screen:<a href=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_main.gif\\\"><img src=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_mainthumb.gif\\\" alt=\\\"Main screen\\\" border=\\\"0\\\" /></a></p>\\n<p>CGI screen:<a href=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_cgi.gif\\\"><img src=\\\"http://www.papascott.de/wordpress/wp-content/uploads/2004/08/hello_cgithumb.gif\\\" alt=\\\"CGI screen\\\" border=\\\"0\\\" /></a></p>\\n<p>Now I just have to write a CGI that actually does something, like, ummm, what did I want to do again? Oh yes, set a couple of configuration variables for my plugin.</p>\\n<p><strong>Update 28 Oct 2004:</strong> David Jacobs noticed some missing backslashes, which I'm guessing went missing when I reimported all my blog entries into Movable Type. Sorry about that!</p>\\n<p><strong>18 Mar 2005</strong> MySQL ate my blackslashes again! Crucial backslashes were missing in <code>$app-&gt;add_methods (hello =&gt; &hello);</code> and <code>$app-&gt;build_page('hello.tmpl', %param);</code>. Thanks to the ProNet mailing list for pointing this out in February and to Nathanial Irons for reminding me that I hadn't yet corrected this page.</p>\",\"fields\":{\"title\":\"Hello World as an MT::App CGI\",\"date\":\"12 Aug 2004\",\"url\":\"https://papascott.de/2004-08-12-hello-world-as-an-mtapp-cgi/\"}}},\"pathContext\":{\"slug\":\"/2004-08-12-hello-world-as-an-mtapp-cgi/\",\"prev\":{\"fields\":{\"title\":\"German spelling reform and linguistic ignorance\",\"date\":\"12 Aug 2004\",\"slug\":\"/2004-08-12-german-spelling-reform-and-linguistic-ignorance/\"}},\"next\":{\"fields\":{\"title\":\"Indiana Jones and the Workplace of Doom\",\"date\":\"13 Aug 2004\",\"slug\":\"/2004-08-13-indiana-jones-and-the-workplace-of-doom/\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2004-08-12-hello-world-as-an-mtapp-cgi.json\n// module id = 6962\n// module chunks = 73624948367820"],"sourceRoot":""}