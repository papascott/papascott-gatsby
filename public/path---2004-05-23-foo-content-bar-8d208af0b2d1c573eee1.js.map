{"version":3,"sources":["webpack:///path---2004-05-23-foo-content-bar-8d208af0b2d1c573eee1.js","webpack:///./.cache/json/2004-05-23-foo-content-bar.json"],"names":["webpackJsonp","6823","module","exports","data","post","html","fields","title","date","url","pathContext","slug","prev","next"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,gxBAA6sBC,QAAoFC,MAAA,kBAAAC,KAAA,cAAAC,IAAA,sDAA0GC,aAAgBC,KAAA,+BAAAC,MAA8CN,QAAUC,MAAA,sBAAAC,KAAA,cAAAG,KAAA,qCAA8FE,MAASP,QAAUC,MAAA,WAAAC,KAAA,cAAAG,KAAA","file":"path---2004-05-23-foo-content-bar-8d208af0b2d1c573eee1.js","sourcesContent":["webpackJsonp([234255129366213],{\n\n/***/ 6823:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p><a title=\\\"WordPress\\\" href=\\\"http://wordpress.org/\\\">WordPress</a> (which has now released 1.2) with its filtering capability makes it real easy to solve one of my formatting quirks, namely that I want my titles and permalinks inline with the content of each post, i.e. within the p-tags that are automatically inserted around the post. With MT I had to install a regex plugin to force in my strings. With WordPress, I define a simple filter, and by setting a priority, that filter is applied _before_ any tags are added.</p>\\n<p>It's really as simple as this:<br />\\n<code>function foo_content_bar($text) {<br />\\n  return 'foo'.$text.'bar';<br />\\n}<br />\\nadd_filter('the_content','foo_content_bar',1);</code></p>\\n<p>(That last parameter to add_filter is the priority.)</p>\",\"fields\":{\"title\":\"Foo Content Bar\",\"date\":\"23 May 2004\",\"url\":\"https://papascott.de/2004-05-23-foo-content-bar/\"}}},\"pathContext\":{\"slug\":\"/2004-05-23-foo-content-bar/\",\"prev\":{\"fields\":{\"title\":\"What was right then\",\"date\":\"21 May 2004\",\"slug\":\"/2004-05-21-what-was-right-then/\"}},\"next\":{\"fields\":{\"title\":\"Tomorrow\",\"date\":\"23 May 2004\",\"slug\":\"/2004-05-23-tomorrow/\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2004-05-23-foo-content-bar-8d208af0b2d1c573eee1.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p><a title=\\\"WordPress\\\" href=\\\"http://wordpress.org/\\\">WordPress</a> (which has now released 1.2) with its filtering capability makes it real easy to solve one of my formatting quirks, namely that I want my titles and permalinks inline with the content of each post, i.e. within the p-tags that are automatically inserted around the post. With MT I had to install a regex plugin to force in my strings. With WordPress, I define a simple filter, and by setting a priority, that filter is applied _before_ any tags are added.</p>\\n<p>It's really as simple as this:<br />\\n<code>function foo_content_bar($text) {<br />\\n  return 'foo'.$text.'bar';<br />\\n}<br />\\nadd_filter('the_content','foo_content_bar',1);</code></p>\\n<p>(That last parameter to add_filter is the priority.)</p>\",\"fields\":{\"title\":\"Foo Content Bar\",\"date\":\"23 May 2004\",\"url\":\"https://papascott.de/2004-05-23-foo-content-bar/\"}}},\"pathContext\":{\"slug\":\"/2004-05-23-foo-content-bar/\",\"prev\":{\"fields\":{\"title\":\"What was right then\",\"date\":\"21 May 2004\",\"slug\":\"/2004-05-21-what-was-right-then/\"}},\"next\":{\"fields\":{\"title\":\"Tomorrow\",\"date\":\"23 May 2004\",\"slug\":\"/2004-05-23-tomorrow/\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2004-05-23-foo-content-bar.json\n// module id = 6823\n// module chunks = 234255129366213"],"sourceRoot":""}