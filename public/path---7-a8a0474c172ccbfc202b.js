webpackJsonp([0x7af4e6fc7393],{8817:function(e,t){e.exports={pathContext:{group:[{node:{fields:{title:"1999.io is simple.  And simple.",date:"05 May 2016",slug:"/2016-05-05-1999io-is-simple-and-simple/",tags:"Y2016"},html:"<p>The past few weeks I've been trying out <a href=\"http://scripting.com/2016/05/04/1238.html\">1999.io</a>, the new blogging software by Dave Winer. You can either try it out at his site <a href=\"http://my.1999.io\">my.1999.io</a> (you just need a Twitter ID to log in) or you can <a href=\"https://github.com/scripting/1999-project/blob/master/docs/setup.md\">install the server</a> on any system that can run Node. Being a server guy I of course installed my own (on a cheap 3.50€‚/mo VPS), and used it to write my last few blog posts. </p>\n<p>I like it because because it's simple. And simple. Simple to write with, simple to work with.</p>\n<p>It's simple to write with. You just open the editor page and type. To update your text, you just click on it and type. There are some simple formatting options, but nothing that gets in the way. When you update, though WebSocket magic anyone reading your post immediately gets the update.</p>\n<p>And on the server it's <a href=\"http://my.1999.io/users/1999io/2016/04/11/0004.html\">simple to work with</a>. There's no database, just files in open formats readable as text, JSON, OPML, RSS, HTML. Formats you can use for other purposes if you are so inclined. Even the HTML files for each post contain the JSON for the post, which I first thought was redundant but now see is brilliant. It's like the web page contains it's own DNA and can re-create itself. </p>\n<p>These open formats allow one to do things with the output that go beyond the server. For instance, I copy the output of my server to an S3 bucket at <a href=\"http://1999.papascott.de\">1999.papascott.de</a>, which can probably handle load better than my cheap VPS :smile:. It's not yet coupled to my main blog on Jekyll (right now I'm using copy and paste), but I imagine it wouldn't too much cleverness to achieve that.</p>\n<p>I hope someday to be able to use 1999.io as a blogging central, with the ability to send my posts to my blog, or Twitter, or Facebook, or Medium, or wherever, but keeping my original posts for myself. I'll let those big silos show my work, but not own it.</p>"},next:{fields:{title:"Gliding 2",date:"27 Apr 2016",slug:"/2016-04-27-gliding-2/"}},previous:{fields:{title:"Million Euro Overdraft",date:"05 Aug 2016",slug:"/2016-08-05-million-euro-overdraft/"}}},{node:{fields:{title:"Gliding 2",date:"27 Apr 2016",slug:"/2016-04-27-gliding-2/",tags:"Y2016"},html:'<iframe width="560" height="315" src="https://www.youtube.com/embed/nsF-UrqqkSQ" frameborder="0" allowfullscreen=""></iframe>\n<p>This is how our son stays out of trouble on weekends. At 16 in Germany he can fly solo, but yet not drive a car. :-)</p>'},next:{fields:{title:"How to build 3000 pages in Jekyll in less than 4 seconds",date:"25 Apr 2016",slug:"/2016-04-25-how-to-build-3000-pages-in-jekyll-in-less-than-4-seconds/"}},previous:{fields:{title:"1999.io is simple.  And simple.",date:"05 May 2016",slug:"/2016-05-05-1999io-is-simple-and-simple/"}}},{node:{fields:{title:"How to build 3000 pages in Jekyll in less than 4 seconds",date:"25 Apr 2016",slug:"/2016-04-25-how-to-build-3000-pages-in-jekyll-in-less-than-4-seconds/",tags:"Y2016"},html:'<p>Last year I converted my Wordpress blog to <a href="http://jekyllrb.com/">Jekyll</a>. My 16 years of blogging are now saved as text files which Jekyll renders into static HTML, which I then push to GitHub where the blog is now hosted. I <a href="http://www.papascott.de/archives/2015/04/30/see-what-sticks/">mentioned then</a> that it took Jekyll some 3 minutes to render my 3000 or so blog posts, which is kind of a drag since the default is to rebuild the entire site every time even a small change is made.</p>\n<p>Actually, the latest version of Jekyll improved build times considerably. It can now build my 3000 pages in about a minute. But when making changes, that\'s still too long to wait.</p>\n<p>However, using a trick, I can now build those 3000 pages in 4 seconds. The trick seems pretty obvious to me, but I\'ve not seen it written up anyplace, so hence this post.</p>\n<p>The trick, of course, is to <em>not</em> build all 3000 pages. For older posts use <a href="https://jquery.com/">jquery</a> to load in parts of the layout that might change, but leave the HTML file alone. For me, those parts are the sidebar and the recent posts. I build HTML snippets for those divs and load them in like:</p>\n<pre><code>$( "#sidebar" ).load( "/includes/sidebar.html" );\n</code></pre>\n<p>Right now, on the Jekyll side I don\'t want it to rebuild posts from before 2015. I\'ve put all those in a _posts/older subdirectory and added an exclude: directive in my _config.yml:</p>\n<pre><code>exclude: [_posts/older]\n</code></pre>\n<p>On the HTML side, ever since I started blogging, even way-back-when with <a href="http://scripting.com/davenet/1999/12/08/editthispagecom.html">EditThisPage</a>, my posts have been sorted by date. I need to tell Jekyll not to erase the pages I\'ve chosen not to rebuild (and it\'s too bad _config.yml doesn\'t understand wild cards)</p>\n<pre><code>keep_files: [archives/1999, archives/200, archives/2010, archives/2011, archives/2012, archives/2013, archives/2014 ]\n</code></pre>\n<p>At least "archives/200" covers an entire decade in one entry. :-)</p>\n<p>And that\'s it. When I do want to rebuild to entire site, I can comment out those two directives and let \'er rip. And being hosted at GitHub, you can see all my gory source files in the source branch at <a href="https://github.com/papascott/papascott.github.io">https://github.com/papascott/papascott.github.io</a></p>'},next:{fields:{title:"Prince",date:"23 Apr 2016",slug:"/2016-04-23-prince/"}},previous:{fields:{title:"Gliding 2",date:"27 Apr 2016",slug:"/2016-04-27-gliding-2/"}}}],pathPrefix:"",first:!1,last:!1,index:7,pageCount:1101}}}});
//# sourceMappingURL=path---7-a8a0474c172ccbfc202b.js.map